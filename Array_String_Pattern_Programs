class ArrayPrograms {
    // // Union and Intersection

    // public static void UnionAndIntersection() {
    // int[] a = { 1, 3, 4, 5, 7 };
    // int[] b = { 2, 3, 5, 6 };
    // int i = 0, j = 0;
    // while (i <= a.length - 1 && j <= b.length - 1) {
    // if (a[i] < b[j]) {
    // System.out.print(a[i] + " ");
    // i++;
    // } else if (a[i] > b[j]) {
    // System.out.print(b[j] + " ");
    // j++;
    // } else {
    // System.out.print(a[i] + " ");
    // i++;
    // j++;
    // }

    // }
    // for (; i <= a.length - 1; i++) {
    // System.out.print(a[i] + " ");

    // }
    // for (; j <= b.length - 1; j++) {
    // System.out.print(b[j] + " ");

    // }
    // System.out.println();
    // for (int l = 0; l < a.length; l++) {
    // for (int m = 0; m < b.length; m++) {
    // if (a[l] == b[m]) {
    // System.out.print(a[l] + " ");
    // }
    // }
    // }

    // }

    // // Binary search
    // public static void BinarySearch(int st, int end) {
    // int key = 5;
    // int[] a = {
    // 1, 2, 3, 4, 5, 67, 89, 210
    // };
    // int mid = (st + end) / 2;
    // if (key > a[mid]) {
    // BinarySearch(mid + 1, end);
    // } else if (key < a[mid]) {
    // BinarySearch(st, mid - 1);
    // } else if (key == a[mid]) {
    // System.out.println("found at index " + mid);
    // return;

    // }

    // }

    // // Longest span with same sum in binary array
    // public static void LongestSpanWithSameSumInBinaryArray() {
    // int[] a1 = { 0, 1, 0, 0, 0, 0 };
    // int[] a2 = { 1, 0, 1, 0, 0, 1 };
    // int sum1 = 0;
    // int len = 0;
    // int n = a1.length;
    // int sum2 = 0;
    // for (int i = 0; i < n; i++) {
    // for (int j = i; j < n; j++) {
    // sum1 += a1[j];
    // sum2 += a2[j];
    // if (sum1 == sum2) {
    // int le = j - i + 1;
    // if (le > len) {
    // len = le;
    // }
    // }
    // }
    // sum1 = 0;
    // sum2 = 0;
    // }
    // System.out.println(len);
    // }

    public static void main(String[] args) {

        // Fill zero for row and column
        // int[][] arr = {
        // { 1, 2, 3, 0 },
        // { 4, 2, 6, 4 },
        // { 7, 5, 6, 3 }
        // };
        // int p = 0;

        // for (int i = 0; i < arr.length; i++) {
        // for (int j = 0; j < arr[0].length; j++) {
        // if (arr[i][j] == 0) {
        // p = j;
        // fill(arr, i, j);
        // break;
        // }
        // }
        // if (arr[i][p] == 0) {
        // break;
        // }
        // }
        // for (int i = 0; i < arr.length; i++) {
        // for (int j = 0; j < arr[0].length; j++) {
        // System.out.print(arr[i][j]);
        // }
        // System.out.println();
        // }

        // rotation of string

        // char[] s1 = ("aravindh" + "aravindh").toCharArray();
        // char[] s2 = "vindhara".toCharArray();
        // int count = 0;
        // for (int i = 0; i < s2.length; i++) {
        // char pick = s2[i];
        // if (count == s2.length) {

        // break;
        // }

        // for (int j = 0; j < s1.length; j++) {
        // if (s1[j] == pick) {
        // count++;
        // continue;
        // }

        // }
        // }
        // if (count == s2.length) {
        // System.out.print("Rot");

        // } else {
        // System.out.print(" Not Rot");
        // }
//First unique character distance
        // int[] arr = new int[256];
        // String s = "statistiacs";
        // for (int i = 0; i < s.length(); i++) {

        //     arr[s.charAt(i)]++;
        // }
        // int dis = Integer.MAX_VALUE;
        // for (int i = 97; i < arr.length; i++) {

        //     if (arr[i] == 1) {
        //         for (int j = 0; j < s.length(); j++) {
        //             if (s.charAt(j) == (char) i) {

        //                 dis = Math.min(dis, j);
        //                 break;
        //             }
        //         }

        //     }
        // }
        // System.out.print(dis + " " + s.charAt(dis));

        // BinarySearch(0, 7);
        // LongestSpanWithSameSumInBinaryArray();
        // UnionAndIntersection();

        // sorting of character array
        // char[] arr = { 'b', 'a', 'c' };// 2,3,1,0,7
        // for (int i = 0; i < arr.length - 1; i++) {
        // for (int j = i + 1; j < arr.length - 1; j++) {
        // if (arr[i] > arr[j]) {

        // char c = arr[i];
        // arr[i] = arr[i + 1];
        // arr[i + 1] = c;
        // }
        // }
        // }
        // for (char j : arr) {
        // System.out.println(j);
        // }

        // URLify:

        // "Mr John Smith ", 13
        // Output: "Mr%20John%20Smith"
        // int sizeOfArray = 13;
        // char[] str = "Mr John Smith ".toCharArray();
        // int newSize = 0;
        // int spacesize = 0;
        // for (int i = 0; i < sizeOfArray; i++) {
        // if (str[i] == ' ') {
        // spacesize++;
        // }
        // }
        // char[] arr = new char[sizeOfArray - spacesize + (3 * spacesize)];
        // int counter = 0;
        // for (int i = 0; i < 13; i++) {
        // if (str[i] == ' ') {
        // for (int j = 0; j <= 2; j++) {
        // if (j == 0) {
        // arr[counter++] = '%';
        // }
        // if (j == 1) {
        // arr[counter++] = '2';
        // }
        // if (j == 2) {
        // arr[counter++] = '0';
        // }
        // }
        // } else {
        // arr[counter++] = str[i];
        // }
        // }
        // System.out.println(new String(arr));
        // one way edit
        // char[] ori = { 'p', 'a', 'l', 'e' };
        // char[] gvn = { 'p', 'l', 'e' };
        // int orilen = ori.length;
        // int count = 0;
        // int j = 0;
        // while (j <= gvn.length - 1) {
        // for (int i = 0; i < ori.length; i++) {
        // if (gvn[j] == ori[i]) {
        // count++;
        // }
        // }
        // j++;
        // }
        // if (orilen - count == 1) {
        // System.out.println("One Way edit");
        // } else {
        // System.out.println("Not an one way edit");
        // }

        // PATTERNS

        // 1) fun_print();
        // * * * * *
        // * * * *
        // * * *
        // * *
        // *
        // *
        // * *
        // * * *
        // * * * *
        // * * * * *

        // 2)
        // *
        // * *
        // * * *
        // * * * *
        // * * * * *

        // for (int i = 1; i <= 5; i++) {
        // for (int j = i; j < 5; j++) {
        // System.out.print(" ");
        // }
        // for (int k = 1; k <= i; k++) {
        // System.out.print("* ");
        // }
        // System.out.println();
        // }

    }

    // static void fun_print() {
    // for (int i = 1; i <= 5; i++) {
    // for (int j = 1; j < i; j++) {
    // System.out.print(" ");
    // }
    // for (int k = i; k <= 5; k++) {
    // System.out.print("* ");
    // }
    // System.out.println();

    // }
    // for (int a = 1; a <= 5; a++) {
    // for (int b = a; b < 5; b++) {
    // System.out.print(" ");
    // }
    // for (int c = 1; c <= a; c++) {
    // System.out.print("* ");
    // }
    // System.out.println();
    // }
    // }

    static void fill(int[][] arr, int i, int j) {
        for (int a = 0; a < arr[0].length; a++) {
            arr[i][a] = 0;
        }
        for (int b = 0; b < arr.length; b++) {
            arr[b][j] = 0;
        }
    }
}
